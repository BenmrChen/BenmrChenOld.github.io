{"pages":[],"posts":[{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/hello-world/"},{"title":"first-markdown","text":"PayMeChien - NotesController生成 使用Artisan e.g. 1php artisan make:controller UserAuthController 結果: 產生 app/Http/Controllers/UserAuthControllr.php 控制器檔案 namespace 用途: 標示本檔案放在什麼資料夾 寫法: 用右斜線分開 e.g.: 12345678910111213141516171819 &lt;?php namespace App\\Http\\Controllers; ``` - ps. 注意大小寫 - 在PhpStorm裡會自動區分大小寫，但EC2不會#### 方法 (function)##### 寫法: public function()&#123;&#125; - e.g.: ```php &lt;?php class UserAuthController extends controller &#123; public function signUpPage()&#123; $binding = [ 'title' =&gt; '註冊' ]; return view('auth.signUp', $binding); &#125; &#125; PS. array的寫法: &quot;中框號&quot; + &quot;key=&gt;value&quot; PSS. 若要回傳什麼的話就用 return PSSS. view(&#39;auth.signUp&#39;, $binding)的意思是要去找resourses/views/auth資料夾裡的signUp.blade.php檔 常用工具 接受輸入資料$input = request()-&gt;all; 驗證 建立驗證規則 123456789101112131415161718192021222324252627282930313233343536 &lt;?php $rules = [ 'nickname' =&gt; [ 'required', 'max:50', ], 'email' =&gt; [ 'required', 'email', 'max:50' ], 'password' =&gt; [ 'required', 'same:password_confirmation' ], 'type' =&gt; [ 'required', 'in:G,A', ], ]; ``` - PS. 各個rules 內在指定時要用`''`給包起來 - PSS. 和指定項相同: `same:xxx`; `'in:G,A'`必須是G或A - More: https://laravel.tw/docs/5.2/validation#available-validation-rules2. 驗證資料 `$validator = Validator::make($input, $rules);` - 使用靜態方法呼叫Validator (前題: 需在上面 use Validator;) - 存成物件存在$Validator ```php &lt;?php if($validator-&gt;fails())&#123; return redirect('user/auth/sign-up') -&gt;withErrors($validator) -&gt;withInput(); &#125; 取出驗證失敗的方法: If($validator-&gt;fails()) 把失敗資料帶著傳回去return redirect的目的地址 withErrors($validator) withInput() 在 blade 顯示 error message 在 route 裡認到’user/auth/sign-up’後就會轉到 signUp.blade，並帶著 $errors 過去 1234567&lt;?php@if($errors) &lt;ul&gt; @foreach($errors-&gt;all() as $err) &lt;li&gt;&#123;&#123; $err &#125;&#125;&lt;/li&gt; @endforeach &lt;/ul&gt; 用 all 的方法來把 $errors 裡面的資料取出來 取出來之後才能再用foreach來把一筆一筆印出 以上語法可以存在components資料夾內，並命名為validationErrorMessage.blade 在主 blade 內就可以用 @include(&#39;components.validationErrorMessage&#39;) 把它引起來用 View@extends: 繼承指定模版 e.g. extends(&#39;layout.master)@section: 傳值 兩種用法 @section(要傳的片段, 要傳的內容) e.g. @section(&#39;title&#39;,$title) @section, @endsection: 指定要傳的片段，接著再把要傳的內容包在其中 e.g. 12345&lt;?php@section('content') // What you want to express abc@endsection","link":"/first-markdown/"},{"title":"My First Post","text":"Demo First Title 5W1H Second Title SOP vs flexibility","link":"/My-First-Post/"}],"tags":[],"categories":[]}